{"version":3,"sources":["components/ScrollIntoView.js","components/PostCode.js","components/Post.js","components/PostCard.js","routes/Recent.js","routes/Work.js","routes/Study.js","routes/Blog.js","routes/Notfound.js","components/Search.js","components/Nav.js","App.js","apollo.js","index.js"],"names":["ScrollIntoView","componentDidMount","window","scrollTo","componentDidUpdate","prevProps","props","location","render","children","PureComponent","withRouter","PostCode","language","lang","replace","style","okaidia","override","css","GET_SINGLE_POST","gql","Post","date","match","history","POST_ID","params","id","useQuery","variables","loading","error","data","content","post","getLanguage","node","attribs","class","console","log","getCode","length","name","className","size","color","onClick","goBack","icon","faArrowLeft","title","faCalendar","Date","toDateString","faPen","author","parse","domToReact","PostCard","featuredImage","excerpt","termNames","tags","to","src","mediaItemUrl","alt","dangerouslySetInnerHTML","__html","nodes","map","tag","i","key","faStickyNote","formatDate","GET_RECENT_POST","Recent","after","fetchMore","posts","dataLength","edges","next","cursor","pageInfo","endCursor","updateQuery","prev","fetchMoreResult","newEdges","__typename","hasMore","hasNextPage","loader","endMessage","Work","Study","Blog","Notfound","Search","GET_PROFILE","Nav","generalSettings","href","target","rel","description","exact","activeClassName","App","basename","path","component","client","ApolloClient","uri","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.e857016f.chunk.js","sourcesContent":["import { PureComponent } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nclass ScrollIntoView extends PureComponent {\r\n    componentDidMount = () => window.scrollTo(0, 0);\r\n\r\n    componentDidUpdate = prevProps => {\r\n        if (this.props.location !== prevProps.location) window.scrollTo(0, 0);\r\n    };\r\n\r\n    render = () => this.props.children;\r\n}\r\n\r\nexport default withRouter(ScrollIntoView);","import React from 'react';\r\nimport {Prism as SyntaxHighlighter} from 'react-syntax-highlighter';\r\nimport {okaidia} from 'react-syntax-highlighter/dist/esm/styles/prism';\r\n\r\nexport const PostCode = ({language, children}) => {\r\n      const lang = language.replace('wp-block-code', '').replace(/ /gi, \"\");\r\n      return(\r\n        <SyntaxHighlighter\r\n      style={okaidia}\r\n      language={lang}>\r\n      {children}\r\n    </SyntaxHighlighter>\r\n    \r\n      )\r\n};","import React, {useEffect} from 'react';\r\nimport { gql } from 'apollo-boost';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport '../css/post.scss';\r\nimport { faPen, faArrowLeft } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faCalendar } from \"@fortawesome/free-regular-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { css } from \"@emotion/core\";\r\nimport { BeatLoader } from \"react-spinners\";\r\nimport parse, {domToReact} from 'html-react-parser';\r\nimport {PostCode} from '../components/PostCode';\r\n\r\nconst override = css`\r\n    margin:0 auto;\r\n    text-align:center;\r\n`\r\nconst formatDate = date => new Date(date).toDateString();\r\n\r\n\r\n\r\nconst GET_SINGLE_POST = gql`\r\n    query GetSinglePost($id: ID!){\r\n        post(id: $id) {\r\n            title(format: RENDERED)\r\n            author {\r\n                name\r\n                }\r\n            content(format: RENDERED)\r\n            date\r\n            id\r\n            termNames(taxonomies: CATEGORY)\r\n            tags {\r\n                edges {\r\n                    node {\r\n                    id\r\n                    }\r\n                }\r\n            }\r\n        }   \r\n  }\r\n`;\r\n\r\nconst Post = ({ match, history }) => {\r\n    const POST_ID = match.params.id;\r\n    const { loading, error, data } = useQuery(GET_SINGLE_POST, {\r\n        variables: { id: POST_ID }\r\n    });\r\n    const content = data?.post.content  ;\r\n\r\n    const replaceCode = node => {\r\n        if (node.name === 'pre') {\r\n          return node.children.length > 0 && <PostCode language={getLanguage(node)}>{domToReact(getCode(node))}</PostCode>;\r\n        }\r\n      };\r\n    \r\n    const getLanguage = node => {\r\n    if (node.attribs.class != null) {\r\n        console.log(node.attribs.class);\r\n        return node.attribs.class;\r\n        \r\n    }\r\n    return null;\r\n    };\r\n    \r\n    const getCode = node => {\r\n    if (node.children.length > 0 && node.children[0].name === 'code') {\r\n        return node.children[0].children;\r\n    } else {\r\n        return node.children;\r\n    }\r\n    };\r\n\r\n    return (\r\n        < div className=\"post_wrap\" >\r\n            {error ? <p className=\"error_message\">포스트를 불러오는데 실패했습니다</p> :\r\n                loading ? <BeatLoader\r\n                    size={10}\r\n                    css={override}\r\n                    color={\"#01c080\"}\r\n                /> :\r\n                    <>\r\n                        <button onClick={history.goBack} className=\"go_back\"><FontAwesomeIcon icon={faArrowLeft} className=\"post_icon\" /><i>List</i></button>\r\n                        <h3 className=\"title\">{data?.post?.title}</h3>\r\n                        <div className=\"meta\">\r\n                            <p className=\"date\"><FontAwesomeIcon icon={faCalendar} className=\"post_icon\" />{formatDate(data?.post.date)}</p>\r\n                            <p className=\"writer\"><FontAwesomeIcon icon={faPen} className=\"post_icon\" />{data?.post.author.name}</p>\r\n                        </div>\r\n                        \r\n                        {/* <div className=\"content\" dangerouslySetInnerHTML={content()}></div> */}\r\n    <div className=\"content\">{parse(content, {replace: replaceCode})}</div>\r\n                    </>\r\n            }\r\n\r\n            \r\n        </div >\r\n    )\r\n\r\n}\r\n\r\nexport default Post;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport '../css/post_card.scss';\r\nimport { faPen, faStickyNote } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faCalendar } from \"@fortawesome/free-regular-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nconst formatDate = date => new Date(date).toDateString();\r\n\r\nconst PostCard = ({ post }) => {\r\n\r\n\r\n    const { title, date, author, featuredImage, excerpt, id, termNames, tags } = post.node;\r\n    const summary = () => {\r\n        return { __html: excerpt }\r\n    }\r\n    const postTitle = () => {\r\n        return { __html: title }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Link to={`/${termNames}/${id}`} className=\"post_card\">\r\n                {featuredImage && <figure className=\"poster\"><img src={featuredImage.mediaItemUrl} alt={title} /></figure>}\r\n                <h3 className=\"title\" dangerouslySetInnerHTML={(postTitle())}></h3>\r\n                <div dangerouslySetInnerHTML={(summary())} className=\"content\"></div>\r\n                {tags.nodes.length > 0 && <div className=\"terms\">\r\n                    {tags.nodes.map((tag, i) => <i className=\"tag\" key={i}>{tag.name}</i>)}\r\n                </div>}\r\n                <div className=\"meta\">\r\n                    <p className=\"category\"><FontAwesomeIcon icon={faStickyNote} className=\"post_icon\" />{termNames}</p>\r\n                    <p className=\"date\"><FontAwesomeIcon icon={faCalendar} className=\"post_icon\" />{formatDate(date)}</p>\r\n                    <p className=\"writer\"><FontAwesomeIcon icon={faPen} className=\"post_icon\" />{author?.name}</p>\r\n                </div>\r\n            </Link>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PostCard\r\n","import React from 'react';\r\nimport { gql } from 'apollo-boost';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport PostCard from '../components/PostCard';\r\nimport InfiniteScroll from 'react-infinite-scroll-component';\r\nimport { css } from \"@emotion/core\";\r\nimport { BeatLoader } from \"react-spinners\";\r\n\r\nconst override = css`\r\n    margin:0 auto;\r\n    position:fixed;\r\n    top:50%;\r\n    left:50%;\r\n    transform:translate(-50%);\r\n`;\r\n\r\nconst GET_RECENT_POST = gql`\r\n    query getRecentPost($cursor: String) {\r\n        posts(first: 5, after: $cursor) {\r\n            pageInfo {\r\n                endCursor\r\n                hasNextPage\r\n            }\r\n            edges {\r\n                node {\r\n                    date\r\n                    author {\r\n                        name\r\n                    }\r\n                    featuredImage {\r\n                        mediaItemUrl\r\n                    }\r\n                    excerpt\r\n                    id\r\n                    title(format: RENDERED)\r\n                    termSlugs(taxonomies: TAG)\r\n                    termNames(taxonomies: CATEGORY)\r\n                    tags {\r\n                        nodes {\r\n                            name\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            __typename\r\n        }\r\n        }\r\n\r\n`;\r\n\r\nconst Recent = () => {\r\n\r\n    const { loading, error, data, fetchMore } = useQuery(GET_RECENT_POST, {\r\n        variables: {\r\n            after: null\r\n        },\r\n\r\n    });\r\n\r\n    const loadMore = () => {\r\n        fetchMore({\r\n            variables: {\r\n                cursor: data.posts.pageInfo.endCursor\r\n            },\r\n            updateQuery: (prev, { fetchMoreResult }) => {\r\n                const newEdges = fetchMoreResult.posts.edges;\r\n                const pageInfo = fetchMoreResult.posts.pageInfo;\r\n                if (!fetchMoreResult) {\r\n                    return prev;\r\n                }\r\n                return {\r\n                    posts: {\r\n                        pageInfo,\r\n                        edges: [...prev.posts.edges, ...newEdges],\r\n                        __typename: \"RootQueryToPostConnectionEdge\"\r\n                    }\r\n\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {error && <p className=\"error_message\">리스트를 불러오는데 실패했습니다</p>}\r\n            {!loading && data && data.posts && (\r\n                <InfiniteScroll\r\n                    dataLength={data.posts.edges.length}\r\n                    next={loadMore}\r\n                    hasMore={data.posts.pageInfo.hasNextPage}\r\n                    loader={\r\n                        <BeatLoader\r\n                            css={override}\r\n                            size={20}\r\n                            color={\"#01c080\"}\r\n                        />\r\n                    }\r\n                    endMessage={\r\n                        <p className=\"end_message\">\r\n                            마지막 포스트입니다\r\n                        </p>\r\n                    }\r\n                >\r\n                    {data.posts.edges.map((post, i) => <PostCard post={post} key={i} />)}\r\n                </InfiniteScroll>\r\n            )\r\n            }\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Recent;","import React from 'react';\r\nimport { gql } from 'apollo-boost';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport PostCard from '../components/PostCard';\r\nimport InfiniteScroll from 'react-infinite-scroll-component';\r\nimport { css } from \"@emotion/core\";\r\nimport { BeatLoader } from \"react-spinners\";\r\n\r\n\r\nconst override = css`\r\n    margin:0 auto;\r\n    position:fixed;\r\n    top:50%;\r\n    left:50%;\r\n    transform:translate(-50%);\r\n    color:red;\r\n`;\r\nconst GET_RECENT_POST = gql`\r\n    query getRecentPost($cursor: String) {\r\n        posts(first: 5, after: $cursor, where: {categoryName: \"work\"}) {\r\n            pageInfo {\r\n                endCursor\r\n                hasNextPage\r\n            }\r\n            edges {\r\n                node {\r\n                    date\r\n                    author {\r\n                        name\r\n                    }\r\n                    featuredImage {\r\n                        mediaItemUrl\r\n                    }\r\n                    excerpt\r\n                    id\r\n                    title(format: RENDERED)\r\n                    termSlugs(taxonomies: TAG)\r\n                    termNames(taxonomies: CATEGORY)\r\n                    tags {\r\n                        nodes {\r\n                            name\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            __typename\r\n        }\r\n        }\r\n\r\n`;\r\n\r\nconst Work = () => {\r\n\r\n    const { loading, error, data, fetchMore } = useQuery(GET_RECENT_POST, {\r\n        variables: {\r\n            after: null\r\n        },\r\n\r\n    });\r\n\r\n    const loadMore = () => {\r\n        fetchMore({\r\n            variables: {\r\n                cursor: data.posts.pageInfo.endCursor\r\n            },\r\n            updateQuery: (prev, { fetchMoreResult }) => {\r\n                const newEdges = fetchMoreResult.posts.edges;\r\n                const pageInfo = fetchMoreResult.posts.pageInfo;\r\n                if (!fetchMoreResult) {\r\n                    return prev;\r\n                }\r\n                return {\r\n                    posts: {\r\n                        pageInfo,\r\n                        edges: [...prev.posts.edges, ...newEdges],\r\n                        __typename: \"RootQueryToPostConnectionEdge\"\r\n                    }\r\n\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {error && <p className=\"error_message\">리스트를 불러오는데 실패했습니다</p>}\r\n            {!loading && data && data.posts && (\r\n                <InfiniteScroll\r\n                    dataLength={data.posts.edges.length}\r\n                    next={loadMore}\r\n                    hasMore={data.posts.pageInfo.hasNextPage}\r\n                    loader={\r\n                        <BeatLoader\r\n                            css={override}\r\n                            size={20}\r\n                            color={\"#01c080\"}\r\n                        />\r\n                    }\r\n                    endMessage={\r\n                        <p className=\"end_message\">\r\n                            마지막 포스트입니다\r\n                        </p>\r\n                    }\r\n                >\r\n                    {data.posts.edges.map((post, i) => <PostCard post={post} key={i} />)}\r\n                </InfiniteScroll>\r\n            )\r\n            }\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Work;","import React from 'react';\r\nimport { gql } from 'apollo-boost';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport PostCard from '../components/PostCard';\r\nimport InfiniteScroll from 'react-infinite-scroll-component';\r\nimport { css } from \"@emotion/core\";\r\nimport { BeatLoader } from \"react-spinners\";\r\n\r\nconst override = css`\r\n    margin:0 auto;\r\n    position:fixed;\r\n    top:50%;\r\n    left:50%;\r\n    transform:translate(-50%);\r\n    color:red;\r\n`;\r\n\r\nconst GET_RECENT_POST = gql`\r\n    query getRecentPost($cursor: String) {\r\n        posts(first: 5, after: $cursor, where: {categoryName: \"study\"}) {\r\n            pageInfo {\r\n                endCursor\r\n                hasNextPage\r\n            }\r\n            edges {\r\n                node {\r\n                    date\r\n                    author {\r\n                        name\r\n                    }\r\n                    featuredImage {\r\n                        mediaItemUrl\r\n                    }\r\n                    excerpt\r\n                    id\r\n                    title(format: RENDERED)\r\n                    termSlugs(taxonomies: TAG)\r\n                    termNames(taxonomies: CATEGORY)\r\n                    tags {\r\n                        nodes {\r\n                            name\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            __typename\r\n        }\r\n        }\r\n\r\n`;\r\n\r\nconst Study = () => {\r\n\r\n    const { loading, error, data, fetchMore } = useQuery(GET_RECENT_POST, {\r\n        variables: {\r\n            after: null\r\n        },\r\n\r\n    });\r\n\r\n    const loadMore = () => {\r\n        fetchMore({\r\n            variables: {\r\n                cursor: data.posts.pageInfo.endCursor\r\n            },\r\n            updateQuery: (prev, { fetchMoreResult }) => {\r\n                const newEdges = fetchMoreResult.posts.edges;\r\n                const pageInfo = fetchMoreResult.posts.pageInfo;\r\n                if (!fetchMoreResult) {\r\n                    return prev;\r\n                }\r\n                return {\r\n                    posts: {\r\n                        pageInfo,\r\n                        edges: [...prev.posts.edges, ...newEdges],\r\n                        __typename: \"RootQueryToPostConnectionEdge\"\r\n                    }\r\n\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {error && <p className=\"error_message\">리스트를 불러오는데 실패했습니다</p>}\r\n            {!loading && data && data.posts && (\r\n                <InfiniteScroll\r\n                    dataLength={data.posts.edges.length}\r\n                    next={loadMore}\r\n                    hasMore={data.posts.pageInfo.hasNextPage}\r\n                    loader={\r\n                        <BeatLoader\r\n                            css={override}\r\n                            size={20}\r\n                            color={\"#01c080\"}\r\n                        />\r\n                    }\r\n                    endMessage={\r\n                        <p className=\"end_message\">\r\n                            마지막 포스트입니다\r\n                        </p>\r\n                    }\r\n                >\r\n                    {data.posts.edges.map((post, i) => <PostCard post={post} key={i} />)}\r\n                </InfiniteScroll>\r\n            )\r\n            }\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Study;","import React from 'react';\r\nimport { gql } from 'apollo-boost';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport PostCard from '../components/PostCard';\r\nimport InfiniteScroll from 'react-infinite-scroll-component';\r\nimport { css } from \"@emotion/core\";\r\nimport { BeatLoader } from \"react-spinners\";\r\n\r\nconst override = css`\r\n    margin:0 auto;\r\n    position:fixed;\r\n    top:50%;\r\n    left:50%;\r\n    transform:translate(-50%);\r\n    color:red;\r\n`;\r\n\r\nconst GET_RECENT_POST = gql`\r\n    query getRecentPost($cursor: String) {\r\n        posts(first: 5, after: $cursor, where: {categoryName: \"blog\"}) {\r\n            pageInfo {\r\n                endCursor\r\n                hasNextPage\r\n            }\r\n            edges {\r\n                node {\r\n                    date\r\n                    author {\r\n                        name\r\n                    }\r\n                    featuredImage {\r\n                        mediaItemUrl\r\n                    }\r\n                    excerpt\r\n                    id\r\n                    title(format: RENDERED)\r\n                    termSlugs(taxonomies: TAG)\r\n                    termNames(taxonomies: CATEGORY)\r\n                    tags {\r\n                        nodes {\r\n                            name\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            __typename\r\n        }\r\n        }\r\n\r\n`;\r\n\r\nconst Blog = () => {\r\n\r\n    const { loading, error, data, fetchMore } = useQuery(GET_RECENT_POST, {\r\n        variables: {\r\n            after: null\r\n        },\r\n\r\n    });\r\n\r\n    const loadMore = () => {\r\n        fetchMore({\r\n            variables: {\r\n                cursor: data.posts.pageInfo.endCursor\r\n            },\r\n            updateQuery: (prev, { fetchMoreResult }) => {\r\n                const newEdges = fetchMoreResult.posts.edges;\r\n                const pageInfo = fetchMoreResult.posts.pageInfo;\r\n                if (!fetchMoreResult) {\r\n                    return prev;\r\n                }\r\n                return {\r\n                    posts: {\r\n                        pageInfo,\r\n                        edges: [...prev.posts.edges, ...newEdges],\r\n                        __typename: \"RootQueryToPostConnectionEdge\"\r\n                    }\r\n\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {error && <p className=\"error_message\">리스트를 불러오는데 실패했습니다</p>}\r\n            {!loading && data && data.posts && (\r\n                <InfiniteScroll\r\n                    dataLength={data.posts.edges.length}\r\n                    next={loadMore}\r\n                    hasMore={data.posts.pageInfo.hasNextPage}\r\n                    loader={\r\n                        <BeatLoader\r\n                            css={override}\r\n                            size={20}\r\n                            color={\"#01c080\"}\r\n                        />\r\n                    }\r\n                    endMessage={\r\n                        <p className=\"end_message\">\r\n                            마지막 포스트입니다\r\n                        </p>\r\n                    }\r\n                >\r\n                    {data.posts.edges.map((post, i) => <PostCard post={post} key={i} />)}\r\n                </InfiniteScroll>\r\n            )\r\n            }\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Blog;","import React from 'react'\r\n\r\nconst Notfound = () => {\r\n    return (\r\n        <div>\r\n            페이지를 찾을 수 없습니다.\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notfound\r\n","import React from 'react';\r\n\r\nconst Search = props => {\r\n\r\n\r\n    return (\r\n        <div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Search\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { gql } from 'apollo-boost';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport Search from './Search';\r\nimport { css } from \"@emotion/core\";\r\nimport { BeatLoader } from \"react-spinners\";\r\n\r\nconst override = css`\r\n    position:absolute;\r\n    top:50%;\r\n    left:50%;\r\n    transform:translate(-50%);\r\n`\r\n\r\nconst GET_PROFILE = gql`\r\n{\r\n    generalSettings {\r\n    url\r\n    description\r\n    title\r\n  }\r\n}\r\n\r\n`;\r\n\r\nconst Nav = () => {\r\n\r\n    const { loading, data, error } = useQuery(GET_PROFILE);\r\n\r\n    return (\r\n        <aside className=\"aside\">\r\n            <section className=\"profile\">\r\n                {loading ? <BeatLoader\r\n                    size={10}\r\n                    css={override}\r\n                    color={\"#01c080\"}\r\n                /> :\r\n                    <>\r\n                        <figure className=\"site_pic\"></figure>\r\n                        <figure className=\"profile_pic\">\r\n                            <div className=\"frame\">\r\n                                <img src=\"https://www.gravatar.com/avatar/bdec2720f46316a7ae8fff2ef7739eb4?s=200\" alt=\"\" />\r\n                            </div>\r\n                        </figure>\r\n                        <div className=\"site_info\">\r\n                            <h1 className=\"title\">{data?.generalSettings.title}</h1>\r\n                            <a href=\"https://heavybear.net\" className=\"url\" target=\"_blank\" rel=\"noopener noreferrer\">https://heavybear.net</a>\r\n                            <p className=\"description\" dangerouslySetInnerHTML={{ __html: data?.generalSettings.description }}></p>\r\n                        </div>\r\n                    </>\r\n                }\r\n                {error && <p class=\"error_message\">데이터를 불러오는데 실패했습니다</p>}\r\n            </section>\r\n            <nav className=\"gnb\">\r\n                <ul className=\"gnb_item\">\r\n                    <li><NavLink exact to=\"/\" activeClassName=\"active\">Posts</NavLink></li>\r\n                    <li><NavLink to=\"/Work\" activeClassName=\"active\">Work</NavLink></li>\r\n                    <li><NavLink to=\"/Study\" activeClassName=\"active\">Study</NavLink></li>\r\n                    <li><NavLink to=\"/Blog\" activeClassName=\"active\">Blog</NavLink></li>\r\n                </ul>\r\n            </nav>\r\n            <Search />\r\n        </aside>\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","import React from 'react';\r\nimport { Route, Switch, HashRouter } from 'react-router-dom';\r\nimport ScrollIntoView from \"./components/ScrollIntoView\";\r\nimport Post from './components/Post';\r\nimport Recent from './routes/Recent';\r\nimport Work from './routes/Work';\r\nimport Study from './routes/Study';\r\nimport Blog from './routes/Blog';\r\nimport Notfound from './routes/Notfound';\r\nimport Nav from './components/Nav';\r\nimport './css/layout.scss'\r\n\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <HashRouter basename=\"/wp-graphql\">\r\n      <ScrollIntoView>\r\n        <div className=\"wrap\">\r\n          <Nav />\r\n          <div className=\"container\">\r\n            <Switch>\r\n              <Route exact path=\"/\" component={Recent} />\r\n              <Route exact path=\"/work\" component={Work} />\r\n              <Route exact path=\"/study\" component={Study} />\r\n              <Route exact path=\"/blog\" component={Blog} />\r\n              <Route path=\"/work/:id\" component={Post} />\r\n              <Route path=\"/study/:id\" component={Post} />\r\n              <Route path=\"/blog/:id\" component={Post} />\r\n              <Route component={Notfound} />\r\n            </Switch>\r\n          </div>\r\n        </div>\r\n      </ScrollIntoView>\r\n    </HashRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import ApolloClient from 'apollo-boost';\r\n\r\nconst client = new ApolloClient({\r\n    uri: \"https://cksrlcks.cafe24.com/wp/graphql\"\r\n})\r\n\r\nexport default client;","import 'core-js/stable';\r\nimport 'regenerator-runtime/runtime';\r\nimport 'react-app-polyfill/ie9';\r\nimport 'react-app-polyfill/stable';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport { ApolloProvider } from '@apollo/react-hooks';\r\nimport client from './apollo';\r\nimport './css/reset.css'\r\n\r\nReactDOM.render(<ApolloProvider client={client}><App /></ApolloProvider>, document.getElementById('root'));\r\n"],"sourceRoot":""}